require("/Users/suwei/dev/laksa-node-example/node_modules/source-map-support/source-map-support.js").install(),module.exports=function(e){function r(e){var r=require("./"+e+"."+o+".hot-update.js");!function(e,r){if(!b[e]||!y[e])return;for(var t in y[e]=!1,r)Object.prototype.hasOwnProperty.call(r,t)&&(f[t]=r[t]);0==--g&&0===v&&w()}(r.id,r.modules)}var t,n=!0,o="7d526f16a3182048d046",s={},i=[],a=[];function d(e){var r=L[e];if(!r)return E;var n=function(n){return r.hot.active?(L[n]?-1===L[n].parents.indexOf(e)&&L[n].parents.push(e):(i=[e],t=n),-1===r.children.indexOf(n)&&r.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),i=[]),E(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return E[e]},set:function(r){E[e]=r}}};for(var s in E)Object.prototype.hasOwnProperty.call(E,s)&&"e"!==s&&"t"!==s&&Object.defineProperty(n,s,o(s));return n.e=function(e){return"ready"===l&&u("prepare"),v++,E.e(e).then(r,function(e){throw r(),e});function r(){v--,"prepare"===l&&(m[e]||x(e),0===v&&0===g&&w())}},n.t=function(e,r){return 1&r&&(e=n(e)),E.t(e,-2&r)},n}var c=[],l="idle";function u(e){l=e;for(var r=0;r<c.length;r++)c[r].call(null,e)}var p,f,h,g=0,v=0,m={},y={},b={};function O(e){return+e+""===e?+e:e}function j(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return n=e,u("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return u("idle"),null;y={},m={},b=e.c,h=e.h,u("prepare");var r=new Promise(function(e,r){p={resolve:e,reject:r}});f={};return x(0),"prepare"===l&&0===v&&0===g&&w(),r})}function x(e){b[e]?(y[e]=!0,g++,r(e)):m[e]=!0}function w(){u("ready");var e=p;if(p=null,e)if(n)Promise.resolve().then(function(){return _(n)}).then(function(r){e.resolve(r)},function(r){e.reject(r)});else{var r=[];for(var t in f)Object.prototype.hasOwnProperty.call(f,t)&&r.push(O(t));e.resolve(r)}}function _(r){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var t,n,a,d,c;function p(e){for(var r=[e],t={},n=r.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),s=o.id,i=o.chain;if((d=L[s])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(d.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var a=0;a<d.parents.length;a++){var c=d.parents[a],l=L[c];if(l){if(l.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([c]),moduleId:s,parentId:c};-1===r.indexOf(c)&&(l.hot._acceptedDependencies[s]?(t[c]||(t[c]=[]),g(t[c],[s])):(delete t[c],r.push(c),n.push({chain:i.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function g(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}r=r||{};var v={},m=[],y={},j=function(){console.warn("[HMR] unexpected require("+w.moduleId+") to disposed module")};for(var x in f)if(Object.prototype.hasOwnProperty.call(f,x)){var w;c=O(x);var _=!1,R=!1,D=!1,P="";switch((w=f[x]?p(c):{type:"disposed",moduleId:x}).chain&&(P="\nUpdate propagation: "+w.chain.join(" -> ")),w.type){case"self-declined":r.onDeclined&&r.onDeclined(w),r.ignoreDeclined||(_=new Error("Aborted because of self decline: "+w.moduleId+P));break;case"declined":r.onDeclined&&r.onDeclined(w),r.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+w.moduleId+" in "+w.parentId+P));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(w),r.ignoreUnaccepted||(_=new Error("Aborted because "+c+" is not accepted"+P));break;case"accepted":r.onAccepted&&r.onAccepted(w),R=!0;break;case"disposed":r.onDisposed&&r.onDisposed(w),D=!0;break;default:throw new Error("Unexception type "+w.type)}if(_)return u("abort"),Promise.reject(_);if(R)for(c in y[c]=f[c],g(m,w.outdatedModules),w.outdatedDependencies)Object.prototype.hasOwnProperty.call(w.outdatedDependencies,c)&&(v[c]||(v[c]=[]),g(v[c],w.outdatedDependencies[c]));D&&(g(m,[w.moduleId]),y[c]=j)}var k,I=[];for(n=0;n<m.length;n++)c=m[n],L[c]&&L[c].hot._selfAccepted&&I.push({module:c,errorHandler:L[c].hot._selfAccepted});u("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var M,S,C=m.slice();C.length>0;)if(c=C.pop(),d=L[c]){var A={},H=d.hot._disposeHandlers;for(a=0;a<H.length;a++)(t=H[a])(A);for(s[c]=A,d.hot.active=!1,delete L[c],delete v[c],a=0;a<d.children.length;a++){var q=L[d.children[a]];q&&((k=q.parents.indexOf(c))>=0&&q.parents.splice(k,1))}}for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(d=L[c]))for(S=v[c],a=0;a<S.length;a++)M=S[a],(k=d.children.indexOf(M))>=0&&d.children.splice(k,1);for(c in u("apply"),o=h,y)Object.prototype.hasOwnProperty.call(y,c)&&(e[c]=y[c]);var N=null;for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(d=L[c])){S=v[c];var T=[];for(n=0;n<S.length;n++)if(M=S[n],t=d.hot._acceptedDependencies[M]){if(-1!==T.indexOf(t))continue;T.push(t)}for(n=0;n<T.length;n++){t=T[n];try{t(S)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:c,dependencyId:S[n],error:e}),r.ignoreErrored||N||(N=e)}}}for(n=0;n<I.length;n++){var U=I[n];c=U.module,i=[c];try{E(c)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:t,originalError:e}),r.ignoreErrored||N||(N=t),N||(N=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:c,error:e}),r.ignoreErrored||N||(N=e)}}return N?(u("fail"),Promise.reject(N)):(u("idle"),new Promise(function(e){e(m)}))}var L={};function E(r){if(L[r])return L[r].exports;var n=L[r]={i:r,l:!1,exports:{},hot:function(e){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},check:j,apply:_,status:function(e){if(!e)return l;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:s[e]};return t=void 0,r}(r),parents:(a=i,i=[],a),children:[]};return e[r].call(n.exports,n,n.exports,d(r)),n.l=!0,n.exports}return E.m=e,E.c=L,E.d=function(e,r,t){E.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},E.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},E.t=function(e,r){if(1&r&&(e=E(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(E.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)E.d(t,n,function(r){return e[r]}.bind(null,n));return t},E.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return E.d(r,"a",r),r},E.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},E.p="",E.h=function(){return o},d(0)(E.s=0)}({"./devOps/serverCert.js":function(e,r,t){(function(r){const n=t("fs"),o=t("path");e.exports={key:n.readFileSync(o.resolve(r,"../resource/encrypt/privatekey.pem")),cert:n.readFileSync(o.resolve(r,"../resource/encrypt/certificate.pem"))}}).call(this,"/")},"./devOps/serverConfig.js":function(e,r,t){e.exports={serverConfig:(e,r)=>({httpType:e,port:r||3e3,options:"https"===e?t("./devOps/serverCert.js"):null}),env:"production"}},"./devOps/serverType.js":function(e,r,t){const n=t("commander");n.version("1.0.0").option("-t, --http","create http Server").option("-s, --https","create https Server").option("-p,--port <n>","define port",parseInt).parse(process.argv);e.exports={httpType:()=>n.http?"http":n.https?"https":"http",serverPort:()=>!!n.port&&n.port}},"./node_modules/node-hot-loader/lib/HmrClient.js":function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.HmrClient=void 0;var n=i(t("./node_modules/node-hot-loader/lib/LogColors.js")),o=i(t("./node_modules/node-hot-loader/lib/Logger.js")),s=t("./node_modules/node-hot-loader/lib/LogLevel.js");function i(e){return e&&e.__esModule?e:{default:e}}function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}class d{constructor(){a(this,"logger",new o.default(n.default.cyan("[HMR]"))),a(this,"logApplyResult",(e,r,t)=>{const n=t&&t.length?r.filter(e=>t.indexOf(e)<0):r;if(n.length>0&&e>=s.LogLevel.ERRORS&&(this.logger.warn("The following modules couldn't be hot updated: (They would need restart the server!)"),n.forEach(e=>{this.logger.warn(` - ${e}`)})),t&&t.length){if(e>=s.LogLevel.NORMAL){this.logger.info("Updated modules:"),t.forEach(e=>{this.logger.info(` - ${e}`)}),t.every(e=>"number"==typeof e)&&this.logger.info("Consider using the NamedModulesPlugin for module names.")}this.upToDate()&&this.logUpToDate(e)}else e>=s.LogLevel.MINIMAL&&this.logger.info("Nothing hot updated.")}),a(this,"logUpToDate",e=>{e>=s.LogLevel.MINIMAL&&this.logger.info("App is up to date.")}),a(this,"defaultListener",r=>{if("built"!==r.action)return;this.lastHash=r.stats.hash;const{logLevel:t}=r;if(this.upToDate())this.logUpToDate(t);else{const r=e.hot.status();"idle"===r?(t>=s.LogLevel.MINIMAL&&this.logger.info("Checking for updates..."),this.check(t)):["abort","fail"].indexOf(r)>=0&&t>=s.LogLevel.ERRORS&&this.logger.warn(`Cannot apply update as a previous update ${r}ed. Need to do restart the server!`)}}),a(this,"upToDate",()=>this.lastHash.indexOf(t.h())>=0),a(this,"check",r=>{e.hot.check().then(t=>t?e.hot.apply({ignoreUnaccepted:!0,ignoreDeclined:!0,ignoreErrored:!0,onUnaccepted:e=>{r>=s.LogLevel.ERRORS&&this.logger.warn(`Ignored an update to unaccepted module ${e.chain.join(" -> ")}`)},onDeclined:e=>{r>=s.LogLevel.ERRORS&&this.logger.warn(`Ignored an update to declined module ${e.chain.join(" -> ")}`)},onErrored:e=>{r>=s.LogLevel.ERRORS&&(this.logger.warn(`Ignored an error while updating module ${e.moduleId} (${e.type})`),this.logger.error(e.error))}}).then(e=>{this.upToDate()||this.check(r),this.logApplyResult(r,t,e)}):(r>=s.LogLevel.ERRORS&&this.logger.warn("Cannot find update. Need to do restart the server!"),Promise.resolve())).catch(t=>{if(r>=s.LogLevel.ERRORS){const r=e.hot.status();["abort","fail"].indexOf(r)>=0?(this.logger.error("Cannot check for update. Need to do restart the server!"),this.logger.error(t.stack||t.message)):this.logger.error(`Update check failed: ${t.stack}`||!1)}})})}run(e=this.defaultListener){return this.logger.info("Waiting for update signal from webpack..."),process.on("message",e),this}}r.HmrClient=d;var c=(new d).run();r.default=c},"./node_modules/node-hot-loader/lib/LogColors.js":function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;class n{}r.default=n,function(e,r,t){r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t}(n,"defaultColors",{bold:"[1m",yellow:"[1m[33m",red:"[1m[31m",green:"[1m[32m",cyan:"[1m[36m",magenta:"[1m[35m"}),Object.keys(n.defaultColors).forEach(e=>{n[e]=(r=>`${n.defaultColors[e]}${r}[39m[22m`)})},"./node_modules/node-hot-loader/lib/LogLevel.js":function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.parseLogLevel=function(e){let r=n.NORMAL;return r=!1===e?n.NONE:r,r="none"===e?n.NONE:r,r="errors-only"===e?n.ERRORS:r,r="minimal"===e?n.MINIMAL:r},r.LogLevel=void 0;const n={NONE:0,ERRORS:1,MINIMAL:2,NORMAL:3};r.LogLevel=n},"./node_modules/node-hot-loader/lib/Logger.js":function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=function(e){return e&&e.__esModule?e:{default:e}}(t("./node_modules/node-hot-loader/lib/LogColors.js"));r.default=class{constructor(e){!function(e,r,t){r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t}(this,"prefix",void 0),this.prefix=e}info(e,...r){console.log(this.prefix,e,...r)}warn(e,...r){console.warn(this.prefix,n.default.yellow(e),...r)}error(e,...r){const t=e.stack||e;console.error(this.prefix,n.default.red(t),...r)}}},"./src/app.js":function(e,r,t){"use strict";t.r(r),function(e){var n=t("morgan"),o=t.n(n),s=t("path"),i=t.n(s),a=t("body-parser"),d=t.n(a),c=t("cors"),l=t.n(c),u=t("errorhandler"),p=t.n(u),f=t("express"),h=t.n(f),g=t("./src/router/index.js");const v=h()();v.use(d.a.urlencoded({extended:!0})),v.use(d.a.json()),v.use(h.a.static(i.a.join(e,"../../client/dist"))),v.use(l()()),v.use(o()("dev")),v.use(p()()),Object(g.a)(v),r.default=v}.call(this,"/")},"./src/index.js":function(e,r,t){"use strict";t.r(r);var n=t("express"),o=t.n(n),s=t("./src/app.js"),i=t("./devOps/serverType.js"),a=t("./devOps/serverConfig.js"),d=t("./src/utils/createServer/index.js");const c=Object(i.httpType)(),l=Object(i.serverPort)();e.hot.accept(["./src/app.js"],function(e){s=t("./src/app.js"),console.log("🔁  HMR Reloading `./app`...")}),console.info("✅  Server-side HMR Enabled!");const u=o()();u.use((e,r,t)=>s.default.handle(e,r,t)),Object(d.a)(Object(a.serverConfig)(c,l),u),r.default=u},"./src/router/index.js":function(e,r,t){"use strict";var n=[{id:"123",name:"foo"},{id:"2345",name:"bar"},{id:"4444",name:"geadfa"}];var o=t("laksa");const s=new(t.n(o).a);s.setProvider("https://api-scilla.zilliqa.com");var i=t("express");const a=t.n(i).a.Router();var d=(e=>e.map(e=>"get"===e.method?a.get(e.name,async(r,t)=>{const n=await e.exec(r,t);t.send(n).end()}):"post"===e.method&&a.post(e.name,async(r,t)=>{const n=await e.exec(r,t);t.send(n).end()})))([{method:"get",name:"/hello",exec:async()=>({hello:"world"})},{method:"get",name:"/user",exec:async e=>{const{query:r}=e,t=r?r.id:null;return await(async e=>n.find(r=>r.id===e))(t)||null}},{method:"get",name:"/getUsers",exec:async()=>(async()=>n)()},{method:"get",name:"/isConnected",exec:async()=>{return await s.isConnected()}},{method:"get",name:"/getBalance",exec:async e=>{const{query:r}=e;return await s.zil.getBalance({address:r.address})}}]);r.a=(e=>{e.use("/laksa",d),e.use((e,r,t)=>{"UnauthorizedError"===e.name&&t.status(401).send({err:"invalid token..."})})})},"./src/utils/createServer/index.js":function(e,r,t){"use strict";t.d(r,"a",function(){return a});var n=t("http"),o=t.n(n),s=t("https"),i=t.n(s);const a=(e,r)=>{const{httpType:t,port:n,options:s}=e;let a;(a="https"===t?i.a.createServer(s,r):o.a.createServer(r)).listen(n,()=>{console.log(`express ${t} is listening on ${n}`)}),a.on("error",e=>((e,r)=>{if("listen"!==e.syscall)throw e;const t="string"==typeof r?`Pipe ${r}`:`Port ${r}`;switch(e.code){case"EACCES":console.error(`${t} requires elevated privileges`),process.exit(1);break;case"EADDRINUSE":console.error(`${t} is already in use`),process.exit(1);break;default:throw e}})(e,n))}},0:function(e,r,t){t("./node_modules/node-hot-loader/lib/HmrClient.js"),e.exports=t("./src/index.js")},"body-parser":function(e,r){e.exports=require("body-parser")},commander:function(e,r){e.exports=require("commander")},cors:function(e,r){e.exports=require("cors")},errorhandler:function(e,r){e.exports=require("errorhandler")},express:function(e,r){e.exports=require("express")},fs:function(e,r){e.exports=require("fs")},http:function(e,r){e.exports=require("http")},https:function(e,r){e.exports=require("https")},laksa:function(e,r){e.exports=require("laksa")},morgan:function(e,r){e.exports=require("morgan")},path:function(e,r){e.exports=require("path")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,